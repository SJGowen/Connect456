@using Connect456Common.Code

@code {
    [Parameter]
    public int Cols { get; set; }
    [Parameter]
    public int Rows { get; set; }
    [Parameter]
    public int InARow { get; set; }

    GameBoard board = new GameBoard(7, 6);

    PieceColor currentTurn = PieceColor.Red;
    Maybe<WinningPlay> winningPlay = Maybe<WinningPlay>.None;
    bool boardFull => board.Board.Cast<GamePiece>().Any(p => p.Color != PieceColor.Blank);
    string boardStyle = "background-color: blue; display: flex; flex-direction: row; max-width: fit-content";

    protected override void OnInitialized()
    {
        board = new GameBoard(Cols, Rows);
        StateHasChanged();
    }

    internal void PieceClicked(int col, int row)
    {
        if (winningPlay.HasValue) { return; }

        var clickedSpace = GetValidPiece(col, row);

        if (clickedSpace.Color == PieceColor.Blank)
        {
            row = GetLowestEmptyRow(col, row);
            clickedSpace = GetValidPiece(col, row);
            clickedSpace.Color = currentTurn;

            winningPlay = GetWinner(col, row);

            if (!winningPlay.HasValue)
            {
                SwitchTurns();
            }
        }
    }

    private int GetLowestEmptyRow(int col, int row)
    {
        while (row < Rows - 1 && GetValidPiece(col, row + 1).Color == PieceColor.Blank)
        {
            row++;
        }

        return row;
    }

    private void SwitchTurns()
    {
        currentTurn = currentTurn == PieceColor.Red ? PieceColor.Yellow : PieceColor.Red;
    }

    internal Maybe<WinningPlay> GetWinner(int col, int row)
    {
        var allWinningMoves = new List<string>();

        // Check all four directions and aggregate winning moves
        foreach (var direction in Enum.GetValues<EvaluationDirection>())
        {
            var winner = EvaluateForWinner(col, row, direction);
            if (winner.HasValue)
            {
                allWinningMoves.AddRange(winner.Value.WinningMoves);
            }
        }

        // If there are any winning moves, return a WinningPlay with all moves
        if (allWinningMoves.Any())
        {
            return Maybe<WinningPlay>.Some(new WinningPlay
            {
                WinningMoves = allWinningMoves.Distinct().ToList(), // Ensure no duplicates
                WinningColor = currentTurn
            });
        }

        return Maybe<WinningPlay>.None;
    }

    private Maybe<WinningPlay> EvaluateForWinner(int col, int row, EvaluationDirection direction)
    {
        GamePiece piece = GetValidPiece(col, row);
        (col, row) = MoveToStart(col, row, direction, piece.Color);

        return EvaluateBoardForWinner(col, row, direction);
    }

    private (int, int) MoveToStart(int col, int row, EvaluationDirection direction, PieceColor color)
    {
        while (IsWithinBounds(col, row) && GetValidPiece(col, row).Color == color)
        {
            (col, row) = GetNextPosition(col, row, direction, reverse: true);
        }

        return GetNextPosition(col, row, direction, reverse: false);
    }

    private (int, int) GetNextPosition(int col, int row, EvaluationDirection direction, bool reverse)
    {
        var step = reverse ? -1 : 1;

        return direction switch
        {
            EvaluationDirection.Vertical => (col, row + step),
            EvaluationDirection.Horizontal => (col + step, row),
            EvaluationDirection.SlopeUp => (col + step, row - step),
            EvaluationDirection.SlopeDown => (col + step, row + step),
            _ => (col, row)
        };
    }

    private bool IsWithinBounds(int col, int row)
    {
        return col >= 0 && col < Cols && row >= 0 && row < Rows;
    }

    internal GamePiece GetValidPiece(int col, int row)
    {
        if (!IsWithinBounds(col, row))
        {
            throw new ArgumentOutOfRangeException($"Attempted to get piece for Col {col}, Row {row}. This is out of range!");
        }

        return board!.Board[col, row];
    }

    private Maybe<WinningPlay> EvaluateBoardForWinner(int col, int row, EvaluationDirection direction)
    {
        var winningMoves = new List<string> { $"{col},{row}" };

        while (true)
        {
            (col, row) = GetNextPosition(col, row, direction, reverse: false);

            if (!IsWithinBounds(col, row) || GetValidPiece(col, row).Color != currentTurn)
            {
                break;
            }

            winningMoves.Add($"{col},{row}");
        }

        if (winningMoves.Count >= InARow)
        {
            return Maybe<WinningPlay>.Some(new WinningPlay
                {
                    WinningMoves = winningMoves,
                    WinningColor = currentTurn,
                });
        }

        return Maybe<WinningPlay>.None;
    }

    private bool IsGamePieceAWinningPiece(Maybe<WinningPlay> winningPlay, int col, int row)
    {
        return winningPlay.HasValue && winningPlay.Value.WinningMoves.Contains($"{col},{row}");
    }

    internal void Reset()
    {
        board = new GameBoard(Cols, Rows);
        SwitchTurns();
        winningPlay = Maybe<WinningPlay>.None;
    }
}

@if (!winningPlay.HasValue)
{
    if (boardFull)
    {
        <h2>It's a Draw! <button class="btn btn-success" @onclick="Reset">Restart</button></h2>
    }
    else
    {
        <h2>@currentTurn's Turn!</h2>
    }
}
else
{
    <h2>@winningPlay.Value.WinningColor Wins! <button class="btn btn-success" @onclick="Reset">Restart</button></h2>
}

<div class="board" style="@boardStyle">
    @for (int col = 0; col < Cols; col++)
    {
        <div class="column">
            @for (int row = 0; row < Rows; row++)
            {
                int savedCol = col;
                int savedRow = row;
                <div class="gamepiece @board!.Board[col,row].Color.ToString().ToLower()" @onclick="@(() => PieceClicked(savedCol, savedRow))"
                     style="@(IsGamePieceAWinningPiece(winningPlay, col, row) ? "opacity: 0.6" : "")"></div>
            }
        </div>
    }
</div>